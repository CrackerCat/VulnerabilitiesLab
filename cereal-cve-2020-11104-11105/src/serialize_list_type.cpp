#include <cereal/cereal.hpp>
#include <cereal/types/list.hpp>

#include "serialize_list_type.h"
#include "getvalue.h"
#include "macro.h"
#include "meta.h"
#include "limits.h"
#include "archives.h"

namespace cereal {
namespace fuzzer {

template <class ArchiveType, class Type, bool Deserialize>
void serializeListType(ArchiveType& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher) {
    std::list<Type> v;
    if ( Deserialize == false ) {
        while ( ds->Get<bool>() ) {
            v.push_back(GetValue<Type>(ds));
            if ( v.size() == kMaxListSize ) {
                break;
            }
        }
        archiveWithNVP();
    } else {
        archive(v);
    }

    /* Hash the values */
    hashContainer(v, hasher);
}

#define INSTANTIATE(archive, deserialize, type) \
    template void serializeListType<archive, type, deserialize>(archive& _archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);

#define INSTANTIATE_ALL(type, kdatatype) \
    FOR_ALL_ARCHIVES(INSTANTIATE, type)

FOR_ALL_TYPES(INSTANTIATE_ALL);

#undef INSTANTIATE_ALL
#undef INSTANTIATE

} /* namespace fuzzer */
} /* namespace cereal */
