#pragma once

#include <fuzzing/datasource/datasource.hpp>
#include <vector>
#include "hasher.h"
#include "types.h"
#include "archives.h"

namespace cereal {
namespace fuzzer {

template <class ArchiveType, class Type, bool Deserialize = false>
void serializeType(ArchiveType& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);

template <class ArchiveType, bool Deserialize = false>
void serializeCustomType(ArchiveType& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);

template <>
void serializeCustomType<cereal::JSONOutputArchive, false>(cereal::JSONOutputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);
template <>
void serializeCustomType<cereal::JSONInputArchive, true>(cereal::JSONInputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);
template <>
void serializeCustomType<cereal::XMLOutputArchive, false>(cereal::XMLOutputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);
template <>
void serializeCustomType<cereal::XMLInputArchive, true>(cereal::XMLInputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);

} /* namespace fuzzer */
} /* namespace cereal */
