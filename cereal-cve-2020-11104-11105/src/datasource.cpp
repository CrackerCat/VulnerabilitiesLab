#include "types.h"

#if defined(FUZZING_HEADERS_NO_IMPL)
#undef FUZZING_HEADERS_NO_IMPL
#endif

#include <fuzzing/datasource/datasource.hpp>

template char fuzzing::datasource::Base::Get<char>(uint64_t);
template unsigned char fuzzing::datasource::Base::Get<unsigned char>(uint64_t);
template double fuzzing::datasource::Base::Get<double>(uint64_t);
template float fuzzing::datasource::Base::Get<float>(uint64_t);
template int fuzzing::datasource::Base::Get<int>(uint64_t);
template long double fuzzing::datasource::Base::Get<long double>(uint64_t);
template long fuzzing::datasource::Base::Get<long>(uint64_t);
template long long fuzzing::datasource::Base::Get<long long>(uint64_t);
template short fuzzing::datasource::Base::Get<short>(uint64_t);
template signed char fuzzing::datasource::Base::Get<signed char>(uint64_t);
template std::bitset<256> fuzzing::datasource::Base::Get<std::bitset<256>>(uint64_t);
template std::complex<double> fuzzing::datasource::Base::Get<std::complex<double>>(uint64_t);
template std::complex<float> fuzzing::datasource::Base::Get<std::complex<float>>(uint64_t);
template std::complex<long double> fuzzing::datasource::Base::Get<std::complex<long double>>(uint64_t);
template unsigned int fuzzing::datasource::Base::Get<unsigned int>(uint64_t);
template unsigned long fuzzing::datasource::Base::Get<unsigned long>(uint64_t);
template unsigned long long fuzzing::datasource::Base::Get<unsigned long long>(uint64_t);
