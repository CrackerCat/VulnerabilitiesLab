#include <fuzzing/datasource/datasource.hpp>
#include <chrono>

#include "getvalue.h"
#include "isnan.h"
#include "exceptions.h"
#include "types.h"

namespace cereal {
namespace fuzzer {

template <class T>
T GetValue(fuzzing::datasource::Datasource* ds) {
    const auto v = ds->Get<T>();
    if ( isnan(v) == true ) {
        throw RecoverableError();
    }
    return v;
}

template <>
std::chrono::duration<int, std::centi> GetValue(fuzzing::datasource::Datasource* ds) {
    return std::chrono::duration<int, std::centi>(ds->Get<int>());
}

template <>
CustomType GetValue(fuzzing::datasource::Datasource* ds) {
    CustomType ret;
    ret.data = ds->GetData(0);
    return ret;
}

template bool GetValue(fuzzing::datasource::Datasource* ds);
template char GetValue(fuzzing::datasource::Datasource* ds);
template signed char GetValue(fuzzing::datasource::Datasource* ds);
template unsigned char GetValue(fuzzing::datasource::Datasource* ds);
template signed short GetValue(fuzzing::datasource::Datasource* ds);
template unsigned short GetValue(fuzzing::datasource::Datasource* ds);
template signed int GetValue(fuzzing::datasource::Datasource* ds);
template unsigned int GetValue(fuzzing::datasource::Datasource* ds);
template signed long GetValue(fuzzing::datasource::Datasource* ds);
template unsigned long GetValue(fuzzing::datasource::Datasource* ds);
template float GetValue(fuzzing::datasource::Datasource* ds);
template double GetValue(fuzzing::datasource::Datasource* ds);
template long double GetValue(fuzzing::datasource::Datasource* ds);
template std::string GetValue(fuzzing::datasource::Datasource* ds);
template std::complex<float> GetValue(fuzzing::datasource::Datasource* ds);
template std::complex<double> GetValue(fuzzing::datasource::Datasource* ds);
template std::complex<long double> GetValue(fuzzing::datasource::Datasource* ds);
template std::bitset<256> GetValue(fuzzing::datasource::Datasource* ds);
template signed long long GetValue(fuzzing::datasource::Datasource* ds);
template unsigned long long GetValue(fuzzing::datasource::Datasource* ds);

} /* namespace fuzzer */
} /* namespace cereal */
