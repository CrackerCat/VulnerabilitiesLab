#include <cereal/cereal.hpp>
#include "serialize_type.h"
#include "getvalue.h"
#include "macro.h"
#include "meta.h"
#include "archives.h"

namespace cereal {
namespace fuzzer {

/* Serializer for basic C++ types */
template <class ArchiveType, class Type, bool Deserialize>
void serializeType(ArchiveType& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher) {
    Type v;
    if ( Deserialize == false ) {
        v = GetValue<Type>(ds);
        archiveWithNVP();
    } else {
        archive(v);
    }

#if defined(DEBUG)
    if ( Deserialize == false ) {
        std::cout << "serialized value: " << v << std::endl;
    } else {
        std::cout << "deserialized value: " << v << std::endl;
    }
#endif

    /* Hash the value */
    if ( hasher != nullptr ) hasher->Hash(v);
}

#define INSTANTIATE(archive, deserialize, type) \
    template void serializeType<archive, type, deserialize>(archive& _archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);

#define INSTANTIATE_ALL(type, kdatatype) \
    FOR_ALL_ARCHIVES(INSTANTIATE, type)

FOR_ALL_TYPES(INSTANTIATE_ALL);

INSTANTIATE(cereal::JSONInputArchive, true, CustomType)
INSTANTIATE(cereal::JSONOutputArchive, false, CustomType)
INSTANTIATE(cereal::XMLInputArchive, true, CustomType)
INSTANTIATE(cereal::XMLOutputArchive, false, CustomType)

#undef INSTANTIATE_ALL
#undef INSTANTIATE

/* The general case, for Binary and PortableBinary archives; do nothing */
template <class ArchiveType, bool Deserialize>
void serializeCustomType(ArchiveType& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher) {
    (void)archive;
    (void)ds;
    (void)hasher;
}

/* Instantiate the general case for Binary and PortableBinary */
template void serializeCustomType<cereal::BinaryInputArchive, true>(cereal::BinaryInputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);
template void serializeCustomType<cereal::BinaryOutputArchive, false>(cereal::BinaryOutputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);
template void serializeCustomType<cereal::PortableBinaryInputArchive, true>(cereal::PortableBinaryInputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);
template void serializeCustomType<cereal::PortableBinaryOutputArchive, false>(cereal::PortableBinaryOutputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);

/* Specializations for JSON and XML */
template <>
void serializeCustomType<cereal::JSONOutputArchive, false>(cereal::JSONOutputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher) {
    serializeType<cereal::JSONOutputArchive, CustomType, false>(archive, ds, hasher);
}

template <>
void serializeCustomType<cereal::JSONInputArchive, true>(cereal::JSONInputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher) {
    serializeType<cereal::JSONInputArchive, CustomType, true>(archive, ds, hasher);
}

template <>
void serializeCustomType<cereal::XMLOutputArchive, false>(cereal::XMLOutputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher) {
    serializeType<cereal::XMLOutputArchive, CustomType, false>(archive, ds, hasher);
}

template <>
void serializeCustomType<cereal::XMLInputArchive, true>(cereal::XMLInputArchive& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher) {
    serializeType<cereal::XMLInputArchive, CustomType, true>(archive, ds, hasher);
}

} /* namespace fuzzer */
} /* namespace cereal */
