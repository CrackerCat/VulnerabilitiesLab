#include <cereal/cereal.hpp>
#include <cereal/types/map.hpp>

#include "serialize_map_type.h"
#include "getvalue.h"
#include "macro.h"
#include "meta.h"
#include "limits.h"
#include "archives.h"

namespace cereal {
namespace fuzzer {

template <class ArchiveType, class Type, bool Deserialize>
void serializeMapType(ArchiveType& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher) {
    std::map<size_t, Type> v;
    if ( Deserialize == false ) {
        while ( ds->Get<bool>() ) {
            v[ ds->Get<size_t>() ] = GetValue<Type>(ds);
            if ( v.size() == kMaxMapSize ) {
                break;
            }
        }
        archiveWithNVP();
    } else {
        archive(v);
    }

    if ( hasher != nullptr ) {
        for (const auto& el : v ) {
            hasher->Hash(el.first);
            hasher->Hash(el.second);
        }
    }
}

#define INSTANTIATE(archive, deserialize, type) \
    template void serializeMapType<archive, type, deserialize>(archive& _archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);

#define INSTANTIATE_ALL(type, kdatatype) \
    FOR_ALL_ARCHIVES(INSTANTIATE, type)

FOR_ALL_TYPES(INSTANTIATE_ALL);

#undef INSTANTIATE_ALL
#undef INSTANTIATE

} /* namespace fuzzer */
} /* namespace cereal */
