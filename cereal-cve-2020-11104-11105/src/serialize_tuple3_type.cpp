#include <cereal/cereal.hpp>
#include <cereal/types/tuple.hpp>

#include "serialize_tuple3_type.h"
#include "getvalue.h"
#include "macro.h"
#include "meta.h"
#include "limits.h"
#include "archives.h"

namespace cereal {
namespace fuzzer {

template <class ArchiveType, class Type, bool Deserialize>
void serializeTuple3Type(ArchiveType& archive, fuzzing::datasource::Datasource* ds, Hasher* hasher) {
    std::tuple<size_t, std::string, Type> v;
    if ( Deserialize == false ) {
        v = std::make_tuple(ds->Get<size_t>(), std::to_string(ds->Get<size_t>()), GetValue<Type>(ds));
        archiveWithNVP();
    } else {
        archive(v);
    }

    if ( hasher != nullptr ) {
        hasher->Hash(std::get<0>(v));
        hasher->Hash(std::get<1>(v));
        hasher->Hash(std::get<2>(v));
    }
}

#define INSTANTIATE(archive, deserialize, type) \
    template void serializeTuple3Type<archive, type, deserialize>(archive& _archive, fuzzing::datasource::Datasource* ds, Hasher* hasher);

#define INSTANTIATE_ALL(type, kdatatype) \
    FOR_ALL_ARCHIVES(INSTANTIATE, type)

FOR_ALL_TYPES(INSTANTIATE_ALL);

#undef INSTANTIATE_ALL
#undef INSTANTIATE

} /* namespace fuzzer */
} /* namespace cereal */
