#include "mutator.h"
#include <vector>
#include <string>

#if defined(FUZZING_HEADERS_NO_IMPL)
#undef FUZZING_HEADERS_NO_IMPL
#endif

#include <fuzzing/datasource/mutator.h>
#include <fuzzing/mutator/mutator.h>

namespace cereal {
namespace fuzzer {

void initializeMutator(void) {
    std::vector< std::string > dictionaryVector = {
        /* JSON dictionary */
        "\"atomic_data\":",
        "\"comparator\":",
        "\"container\":",
        "\"count\":",
        "\"data\":",
        "\"first\":",
        "\"id\":",
        "\"imag\":",
        "\"index\":",
        "\"locked_ptr\":",
        "\"nullopt\":",
        "\"polymorphic_id\":",
        "\"polymorphic_name\":",
        "\"ptr_wrapper\":",
        "\"real\":",
        "\"second\":",
        "\"time_since_epoch\":",
        "\"type\":",
        "\"valid\":",
        "\"which\":",
        "\"value0\":",
        "\"value1\":",
        "\"value2\":",
        "\"value-1\":",

        /* XML dictionary */
        "<?xmlversion=\"1.0\"encoding=\"utf-8\"?><cereal><value0><value0>AAAAAAAAAAAAAAAAAAAAAA==</value0></value0></cereal>",
        "<atomic_data>1</atomic_data>",
        "<comparator>1</comparator>",
        "<container>1</container>",
        "<count>1</count>",
        "<data>1</data>",
        "<first>1</first>",
        "<id>1</id>",
        "<imag>1</imag>",
        "<index>1</index>",
        "<locked_ptr>1</locked_ptr>",
        "<nullopt>1</nullopt>",
        "<polymorphic_id>1</polymorphic_id>",
        "<polymorphic_name>1</polymorphic_name>",
        "<ptr_wrapper>1</ptr_wrapper>",
        "<real>1</real>",
        "<second>1</second>",
        "<time_since_epoch>1</time_since_epoch>",
        "<type>1</type>",
        "<valid>1</valid>",
        "<which>1</which>",
        "<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///dev/urandom\"> ]>",
        "<?xml version=\"1.0\"?>\x0Ax0D <!DOCTYPE lolz [\x0Ax0D <!ENTITY lol \"lol\">\x0Ax0D <!ELEMENT lolz (#PCDATA)>\x0Ax0D <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\x0Ax0D <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">\x0Ax0D <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">\x0Ax0D <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">\x0Ax0D <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">\x0Ax0D <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">\x0Ax0D <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">\x0Ax0D <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">\x0Ax0D <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">\x0Ax0D ]>\x0Ax0D <lolz>&lol9;</lolz>\x0Ax0D",
        " \"\"",
        " \"\"",
        " \"\"",
        " \"\"",
        " \"\"",
        " :\"\"",
        " :\"\"",
        " :\"\"",
        " :\"\"",
        " \"\"",
        "&;",
        "&#;",
        "&;",
        "&#;",
        "ANY",
        "[]",
        "CDATA",
        ":",
        ":",
        ":",
        "--",
        "EMPTY",
        "\"\"",
        "''",
        "ENTITIES",
        "ENTITY",
        "#FIXED",
        "ID",
        "IDREF",
        "IDREFS",
        "#IMPLIED",
        "NMTOKEN",
        "NMTOKENS",
        "NOTATION",
        "()",
        "#PCDATA",
        "%",
        "PUBLIC",
        "#REQUIRED",
        ":",
        "SYSTEM",
        "UCS-",
        "UTF-",
        "UTF-",
        ":",
        "<!ATTLIST",
        "<![CDATA[",
        "</>",
        "<!DOCTYPE",
        "<!ELEMENT",
        "<!ENTITY",
        "<![IGNORE[",
        "<![INCLUDE[",
        "<!NOTATION",
        "<>",
        "< />",
        "<!",
        "<?",
        "]]>",
    };

    auto dsMutator = std::make_unique<fuzzing::datasource::Mutator>();
    auto dictionary = std::make_shared<fuzzing::dictionary::Dictionary>( dictionaryVector );
    dsMutator->AddSource(dictionary);

    fuzzing::mutator::mutators.push_back( std::move(dsMutator) );
}

} /* namespace fuzzer */
} /* namespace cereal */
