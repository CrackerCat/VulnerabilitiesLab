#include "types.h"

namespace cereal {
namespace fuzzer {

/* The general case: not floating point, so no NaN testing */
template <class T> bool isnan(const T v) { (void)v; return false; }

/* Specializations for all supported floating point types */
template <> bool isnan<>(const float v) { return !std::isnormal(v); }
template <> bool isnan<>(const double v) { return !std::isnormal(v); }
template <> bool isnan<>(const long double v) { return !std::isnormal(v); }
template <> bool isnan<>(const std::complex<float> v) { return !std::isnormal(v.real()) || !std::isnormal(v.imag()); }
template <> bool isnan<>(const std::complex<double> v) { return !std::isnormal(v.real()) || !std::isnormal(v.imag()); }
template <> bool isnan<>(const std::complex<long double> v) { return !std::isnormal(v.real()) || !std::isnormal(v.imag()); }

/* Explicit instantiations of the general case of all supported non-floating point types */
template bool isnan<bool>(const bool v);
template bool isnan<char>(const char v);
template bool isnan<signed char>(const signed char v);
template bool isnan<unsigned char>(const unsigned char v);
template bool isnan<signed short>(const signed short v);
template bool isnan<unsigned short>(const unsigned short v);
template bool isnan<signed int>(const signed int v);
template bool isnan<unsigned int>(const unsigned int v);
template bool isnan<signed long>(const signed long v);
template bool isnan<unsigned long>(const unsigned long v);
template bool isnan<std::string>(const std::string v);
template bool isnan<std::bitset<256>>(const std::bitset<256> v);
template bool isnan<signed long long>(const signed long long v);
template bool isnan<unsigned long long>(const unsigned long long v);
template bool isnan<Chrono>(const Chrono v);
template bool isnan<CustomType>(const CustomType v);

} /* namespace fuzzer */
} /* namespace cereal */
