#pragma once

#include <vector>
#include <fuzzing/datasource/datasource.hpp>
#include "typeinfo.h"

namespace cereal {
namespace fuzzer {

template <class TypeEnum>
TypeEnum getType(fuzzing::datasource::Datasource& ds);

std::vector<TypeInfo> getTypeInfos(fuzzing::datasource::Datasource& ds);

template <class OutputArchiveType>
uint64_t serializeFromTypes(OutputArchiveType& archiveTo, const std::vector<TypeInfo>& typeInfos, fuzzing::datasource::Datasource* ds = nullptr);

template <class InputArchiveType, bool Hash = true>
uint64_t serializeToTypes(InputArchiveType& archiveFrom, const std::vector<TypeInfo>& typeInfos);

bool ignoreHashMismatch(const std::vector<TypeInfo>& typeInfos);

} /* namespace fuzzer */
} /* namespace cereal */
