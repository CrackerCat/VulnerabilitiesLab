#pragma once

#include <cstdint>
#include <complex>
#include <string>
#include <chrono>

#include "types.h"

extern "C" {
    #include "xxHash/xxhash.h"
}

namespace cereal {
namespace fuzzer {

class Hasher {
    private:
        XXH64_state_t* state = nullptr;
    public:
        Hasher(void);

        ~Hasher();

        void Hash(const void* data, const size_t size);
        template <class T> void Hash(const T& v);
        void Hash(const long double& ld);
        void Hash(const std::complex<long double>& v);
        void Hash(const std::string& s);
        void Hash(const std::chrono::duration<int, std::centi>& d);
        void Hash(const CustomType& c);
        uint64_t GetHash(void);
};

/* Hasher for values in containers which support standard iteration */
template <class Type>
void hashContainer(const Type& container, Hasher* hasher) {
    if ( hasher == nullptr ) return;

    for (const auto& el : container) {
        hasher->Hash(el);
    }
}

} /* namespace fuzzer */
} /* namespace cereal */
