#include <string>
#include "method_untrusted-deserialization.h"
#include "archives.h"
#include "serialize-helper.h"

namespace cereal {
namespace fuzzer {
namespace method {

namespace untrusted_deserialization_detail {

/* 1. Construct a list of types
 *
 * 2. Deserialization
 *    - For each type:
 *      - Deserialize the value
 */
template <class InputArchive>
void test(fuzzing::datasource::Datasource& ds) {
    const auto inputData = ds.GetData(0);
    std::stringstream ss(std::string(inputData.begin(), inputData.end()));

    InputArchive archiveFrom(ss);

    /* Get types */
    const auto typeInfos = getTypeInfos(ds);

    /* Deserialize types */
    serializeToTypes<InputArchive, false>(archiveFrom, typeInfos);
}

} /* namespace untrusted_deserialization_detail */

/* Choose an archive type, and launch the handler for that type */
void testUntrustedDeserialization(const std::vector<uint8_t>& dsData) {
#if defined(DEBUG)
    std::cout << "Enter " << std::string(__FUNCTION__) << std::endl;
#endif

    fuzzing::datasource::Datasource ds(dsData.data(), dsData.size());

    const uint8_t which = ds.Get<uint8_t>();

    switch ( which ) {
        case    0:
            untrusted_deserialization_detail::test<cereal::BinaryInputArchive>(ds);
            break;
        case    1:
            untrusted_deserialization_detail::test<cereal::PortableBinaryInputArchive>(ds);
            break;
        case    2:
            untrusted_deserialization_detail::test<cereal::XMLInputArchive>(ds);
            break;
        case    3:
            untrusted_deserialization_detail::test<cereal::JSONInputArchive>(ds);
            break;
    }
}

} /* namespace method */
} /* namespace fuzzer */
} /* namespace cereal */
